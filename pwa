
// File: App.js (Complete PWA Implementation)
import React, { useState, useEffect, Suspense, useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Environment, ContactShadows } from '@react-three/drei';
import * as THREE from 'three';

// ======================== PWA Service Worker Setup ========================
function registerServiceWorker() {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js').then(registration => {
        console.log('SW registered: ', registration);
      }).catch(registrationError => {
        console.log('SW registration failed: ', registrationError);
      });
    });
  }
}

// ======================== Components ========================
function LoadingSpinner() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-indigo-50 to-blue-50">
      <div className="text-center">
        <div className="inline-flex space-x-2 mb-4">
          <div className="w-3 h-3 bg-indigo-600 rounded-full animate-bounce"></div>
          <div className="w-3 h-3 bg-indigo-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
          <div className="w-3 h-3 bg-indigo-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
        </div>
        <p className="text-gray-600 text-lg">Loading 3D Shoe Customizer...</p>
      </div>
    </div>
  );
}

function ShoeModel({ config }) {
  const meshRef = useRef();
  const upperRef = useRef();
  const soleRef = useRef();
  
  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += delta * 0.2;
    }
  });

  const getShoeGeometry = (type) => {
    switch (type) {
      case 'boot': return { upper: [2, 1.2, 4], sole: [2.2, 0.4, 4.2] };
      case 'dress': return { upper: [1.8, 0.7, 4.2], sole: [2, 0.2, 4.4] };
      case 'casual': return { upper: [2.1, 0.9, 3.8], sole: [2.3, 0.3, 4] };
      default: return { upper: [2, 0.8, 4], sole: [2.2, 0.3, 4.2] };
    }
  };

  const geometry = getShoeGeometry(config.type);

  return (
    <group ref={meshRef} dispose={null}>
      <mesh ref={upperRef} position={[0, 0, 0]}>
        <boxGeometry args={geometry.upper} />
        <meshStandardMaterial 
          color={config.primaryColor}
          roughness={config.material === 'leather' ? 0.8 : config.material === 'canvas' ? 0.9 : 0.2}
          metalness={config.material === 'synthetic' ? 0.3 : 0.1}
        />
      </mesh>
      
      <mesh ref={soleRef} position={[0, -0.5, 0]}>
        <boxGeometry args={geometry.sole} />
        <meshStandardMaterial color={config.secondaryColor} roughness={0.9} />
      </mesh>
      
      {(config.type === 'sneaker' || config.type === 'casual') && (
        <>
          <mesh position={[0, 0.2, 1.5]}>
            <cylinderGeometry args={[0.02, 0.02, 0.3]} />
            <meshStandardMaterial color="#2d2d2d" />
          </mesh>
          <mesh position={[0, 0.2, 1]}>
            <cylinderGeometry args={[0.02, 0.02, 0.3]} />
            <meshStandardMaterial color="#2d2d2d" />
          </mesh>
          <mesh position={[0, 0.2, 0.5]}>
            <cylinderGeometry args={[0.02, 0.02, 0.3]} />
            <meshStandardMaterial color="#2d2d2d" />
          </mesh>
        </>
      )}
    </group>
  );
}

function ShoeCustomizer({ config }) {
  return (
    <div className="w-full h-96 rounded-xl overflow-hidden shadow-2xl bg-gradient-to-br from-gray-50 to-gray-100">
      <Canvas
        camera={{ position: [5, 2, 5], fov: 50 }}
        shadows
        gl={{ antialias: true }}
      >
        <ambientLight intensity={0.4} />
        <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
        <pointLight position={[-10, -10, -10]} intensity={0.2} />
        <ShoeModel config={config} />
        <ContactShadows position={[0, -1, 0]} opacity={0.4} scale={10} blur={2.5} />
        <Environment preset="studio" />
        <OrbitControls enablePan enableZoom enableRotate minDistance={3} maxDistance={15} />
      </Canvas>
    </div>
  );
}

function ControlPanel({ config, onChange }) {
  const handleChange = (e) => {
    const { name, value, type } = e.target;
    onChange({
      [name]: type === 'number' ? parseInt(value) : value
    });
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 space-y-6">
      <h3 className="text-2xl font-bold text-gray-800 mb-6">Customize Your Shoe</h3>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Shoe Type:</label>
          <select 
            name="type"
            value={config.type} 
            onChange={handleChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          >
            <option value="sneaker">Sneaker</option>
            <option value="boot">Boot</option>
            <option value="dress">Dress Shoe</option>
            <option value="casual">Casual</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Primary Color:</label>
          <div className="flex items-center space-x-3">
            <input
              type="color"
              name="primaryColor"
              value={config.primaryColor}
              onChange={handleChange}
              className="w-12 h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
            />
            <span className="text-sm text-gray-600">{config.primaryColor}</span>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Secondary Color:</label>
          <div className="flex items-center space-x-3">
            <input
              type="color"
              name="secondaryColor"
              value={config.secondaryColor}
              onChange={handleChange}
              className="w-12 h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
            />
            <span className="text-sm text-gray-600">{config.secondaryColor}</span>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">Material:</label>
          <div className="grid grid-cols-3 gap-3">
            {['leather', 'canvas', 'synthetic'].map(material => (
              <label key={material} className="flex items-center justify-center p-3 border-2 rounded-lg cursor-pointer hover:bg-gray-50">
                <input
                  type="radio"
                  name="material"
                  value={material}
                  checked={config.material === material}
                  onChange={handleChange}
                  className="sr-only"
                />
                <span className={`text-sm font-medium ${config.material === material ? 'text-indigo-600' : 'text-gray-600'}`}>
                  {material.charAt(0).toUpperCase() + material.slice(1)}
                </span>
              </label>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Size:</label>
          <div className="space-y-2">
            <input
              type="range"
              name="size"
              min="6"
              max="13"
              value={config.size}
              onChange={handleChange}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>6</span>
              <span className="font-medium text-indigo-600">Size {config.size}</span>
              <span>13</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// ======================== Main App Component ========================
export default function App() {
  const [shoeConfig, setShoeConfig] = useState({
    type: 'sneaker',
    primaryColor: '#4f46e5',
    secondaryColor: '#ffffff',
    material: 'leather',
    size: 9
  });

  const [isLoading, setIsLoading] = useState(true);
  const [isOffline, setIsOffline] = useState(!navigator.onLine);
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isInstallable, setIsInstallable] = useState(false);

  useEffect(() => {
    // Register service worker
    registerServiceWorker();

    // Handle installation prompt
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setIsInstallable(true);
    });

    // Handle network status
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Simulate loading
    const timer = setTimeout(() => setIsLoading(false), 2000);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      clearTimeout(timer);
    };
  }, []);

  const handleInstallClick = () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      deferredPrompt.userChoice.then((choiceResult) => {
        if (choiceResult.outcome === 'accepted') {
          console.log('User accepted install');
        } else {
          console.log('User dismissed install');
        }
        setDeferredPrompt(null);
      });
    }
  };

  const handleConfigChange = (newConfig) => {
    setShoeConfig(prev => ({ ...prev, ...newConfig }));
  };

  if (isLoading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-blue-50">
      {/* PWA Installation Banner */}
      {isInstallable && (
        <div className="bg-indigo-600 text-white p-3 text-center">
          <div className="max-w-7xl mx-auto flex justify-between items-center">
            <span>Install this app for a better experience</span>
            <button 
              onClick={handleInstallClick}
              className="ml-4 px-4 py-2 bg-white text-indigo-600 rounded-lg font-medium"
            >
              Install
            </button>
          </div>
        </div>
      )}

      {/* Offline Notification */}
      {isOffline && (
        <div className="bg-yellow-500 text-white p-3 text-center">
          You are currently offline. Some features may be limited.
        </div>
      )}

      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-900 mb-2">
              3D Shoe Customizer
            </h1>
            <p className="text-lg text-gray-600">
              Design your perfect custom shoes in real-time
            </p>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-1">
            <ControlPanel config={shoeConfig} onChange={handleConfigChange} />
          </div>
          
          <div className="lg:col-span-2">
            <div className="space-y-4">
              <Suspense fallback={
                <div className="w-full h-96 bg-gray-100 rounded-xl flex items-center justify-center">
                  <div className="text-gray-500">Loading 3D Model...</div>
                </div>
              }>
                <ShoeCustomizer config={shoeConfig} />
              </Suspense>
              
              <div className="bg-white rounded-lg p-4 shadow-sm">
                <div className="grid grid-cols-3 gap-4 text-sm text-gray-600">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-indigo-500 rounded-full"></div>
                    <span>Rotate: Left click + drag</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span>Zoom: Mouse wheel</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                    <span>Pan: Right click + drag</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="text-center text-gray-600">
            <p>&copy; {new Date().getFullYear()} 3D Shoe Customizer PWA</p>
          </div>
        </div>
      </footer>

      {/* Service Worker Registration */}
      <script dangerouslySetInnerHTML={{
        __html: `
          if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
              navigator.serviceWorker.register('/sw.js').then(function(registration) {
                console.log('ServiceWorker registration successful');
              }, function(err) {
                console.log('ServiceWorker registration failed: ', err);
              });
            });
          }
        `
      }} />

      {/* Manifest Link */}
      <link rel="manifest" href="/manifest.json" />
    </div>
  );
}

// ======================== Service Worker (sw.js) ========================
// This would normally be in a separate file, but included here for completeness
const CACHE_NAME = 'shoe-customizer-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/static/js/main.chunk.js',
  '/static/css/main.chunk.css',
  '/manifest.json',
  '/favicon.ico'
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(ASSETS_TO_CACHE))
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => response || fetch(event.request))
  );
});

{
  "short_name": "Shoe Customizer",
  "name": "3D Shoe Customizer PWA",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#4f46e5",
  "background_color": "#ffffff",
  "orientation": "portrait-primary"
}

{
  "short_name": "Shoe Customizer",
  "name": "3D Shoe Customizer PWA",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "kahiga.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#4f46e5",
  "background_color": "#ffffff",
  "orientation": "portrait-primary"
}
