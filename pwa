// src/components/ShoeCustomizer.js
import React, { useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Environment, ContactShadows, useGLTF } from '@react-three/drei';
import * as THREE from 'three';

function ShoeModel({ config }) {
  const meshRef = useRef();
  const { nodes, materials } = useGLTF('/assets/models/shoe.glb');
  
  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += delta * 0.1;
    }
  });

  return (
    <group ref={meshRef} dispose={null}>
      {nodes ? (
        <>
          <mesh geometry={nodes.upper.geometry}>
            <meshStandardMaterial 
              color={config.primaryColor}
              roughness={config.material === 'leather' ? 0.8 : 0.2}
              metalness={config.material === 'synthetic' ? 0.3 : 0.1}
            />
          </mesh>
          <mesh geometry={nodes.sole.geometry}>
            <meshStandardMaterial 
              color={config.secondaryColor}
              roughness={0.9}
            />
          </mesh>
        </>
      ) : (
        <>
          <mesh position={[0, 0, 0]}>
            <boxGeometry args={[2, 0.8, 4]} />
            <meshStandardMaterial 
              color={config.primaryColor}
              roughness={config.material === 'leather' ? 0.8 : 0.2}
              metalness={config.material === 'synthetic' ? 0.3 : 0.1}
            />
          </mesh>
          <mesh position={[0, -0.5, 0]}>
            <boxGeometry args={[2.2, 0.3, 4.2]} />
            <meshStandardMaterial 
              color={config.secondaryColor}
              roughness={0.9}
            />
          </mesh>
        </>
      )}
    </group>
  );
}

export default function ShoeCustomizer({ config }) {
  return (
    <div className="canvas-container">
      <Canvas
        camera={{ position: [5, 2, 5], fov: 50 }}
        shadows
        gl={{ antialias: true }}
      >
        <ambientLight intensity={0.5} />
        <directionalLight 
          position={[10, 10, 5]} 
          intensity={1}
          castShadow
          shadow-mapSize={[2048, 2048]}
          shadow-camera-far={50}
          shadow-camera-left={-10}
          shadow-camera-right={10}
          shadow-camera-top={10}
          shadow-camera-bottom={-10}
        />
        <pointLight position={[-10, -10, -10]} intensity={0.2} />
        
        <ShoeModel config={config} />
        
        <ContactShadows 
          position={[0, -1, 0]} 
          opacity={0.4} 
          scale={10} 
          blur={2.5} 
          far={4.5} 
        />
        
        <Environment preset="studio" />
        
        <OrbitControls 
          enablePan={true}
          enableZoom={true}
          enableRotate={true}
          minDistance={3}
          maxDistance={15}
        />
      </Canvas>
    </div>
  );
}

// src/components/ControlPanel.js
import React from 'react';

export default function ControlPanel({ config, onChange }) {
  const handleChange = (e) => {
    const { name, value, type } = e.target;
    onChange({
      [name]: type === 'number' ? parseInt(value) : value
    });
  };

  return (
    <div className="control-panel">
      <h3>Customize Your Shoe</h3>
      
      <div className="control-group">
        <label>Shoe Type:</label>
        <select 
          name="type"
          value={config.type} 
          onChange={handleChange}
        >
          <option value="sneaker">Sneaker</option>
          <option value="boot">Boot</option>
          <option value="dress">Dress Shoe</option>
          <option value="casual">Casual</option>
        </select>
      </div>

      <div className="control-group">
        <label>Primary Color:</label>
        <input
          type="color"
          name="primaryColor"
          value={config.primaryColor}
          onChange={handleChange}
        />
      </div>

      <div className="control-group">
        <label>Secondary Color:</label>
        <input
          type="color"
          name="secondaryColor"
          value={config.secondaryColor}
          onChange={handleChange}
        />
      </div>

      <div className="control-group">
        <label>Material:</label>
        <div className="radio-group">
          {['leather', 'canvas', 'synthetic'].map(material => (
            <label key={material}>
              <input
                type="radio"
                name="material"
                value={material}
                checked={config.material === material}
                onChange={handleChange}
              />
              {material.charAt(0).toUpperCase() + material.slice(1)}
            </label>
          ))}
        </div>
      </div>

      <div className="control-group">
        <label>Size:</label>
        <input
          type="range"
          name="size"
          min="6"
          max="13"
          value={config.size}
          onChange={handleChange}
        />
        <span className="size-display">Size {config.size}</span>
      </div>
    </div>
  );
}

// src/components/LoadingSpinner.js
import React from 'react';

export default function LoadingSpinner() {
  return (
    <div className="loading-spinner">
      <div className="spinner">
        <div className="bounce1"></div>
        <div className="bounce2"></div>
        <div className="bounce3"></div>
      </div>
      <p>Loading 3D Shoe Customizer...</p>
    </div>
  );
}

// src/App.js
import React, { useState, useEffect, Suspense } from 'react';
import ShoeCustomizer from './components/ShoeCustomizer';
import ControlPanel from './components/ControlPanel';
import LoadingSpinner from './components/LoadingSpinner';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import './App.css';

export default function App() {
  const [shoeConfig, setShoeConfig] = useState(() => {
    const savedConfig = localStorage.getItem('shoeConfig');
    return savedConfig ? JSON.parse(savedConfig) : {
      type: 'sneaker',
      primaryColor: '#4f46e5',
      secondaryColor: '#ffffff',
      material: 'leather',
      size: 9
    };
  });

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Register service worker
    serviceWorkerRegistration.register();

    // Load assets
    const loadAssets = async () => {
      try {
        await Promise.all([
          import('@react-three/drei').then(module => {
            if (!module.useGLTF.preload) return;
            module.useGLTF.preload('/assets/models/shoe.glb');
          }),
          new Promise(resolve => setTimeout(resolve, 1500)) // Minimum loading time
        ]);
      } finally {
        setIsLoading(false);
      }
    };

    loadAssets();
  }, []);

  useEffect(() => {
    localStorage.setItem('shoeConfig', JSON.stringify(shoeConfig));
  }, [shoeConfig]);

  const handleConfigChange = (newConfig) => {
    setShoeConfig(prev => ({ ...prev, ...newConfig }));
  };

  if (isLoading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="app">
      <header className="app-header">
        <h1>3D Shoe Customizer</h1>
        <p>Design your perfect custom shoes</p>
      </header>
      <main className="app-main">
        <ControlPanel 
          config={shoeConfig}
          onChange={handleConfigChange}
        />
        <div className="viewer-container">
          <Suspense fallback={<LoadingSpinner />}>
            <ShoeCustomizer config={shoeConfig} />
          </Suspense>
          <div className="viewer-info">
            <p>Rotate: Left click + drag</p>
            <p>Zoom: Mouse wheel or pinch</p>
            <p>Pan: Right click + drag</p>
          </div>
        </div>
      </main>
      <footer className="app-footer">
        <p>&copy; {new Date().getFullYear()} 3D Shoe Customizer. Built with React & Three.js</p>
      </footer>
    </div>
  );
}

// src/serviceWorkerRegistration.js
export function register() {
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(registration => {
          console.log('SW registered:', registration);
          registration.update();
        })
        .catch(error => {
          console.log('SW registration failed:', error);
        });
    });
  }
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(registration => {
      registration.unregister();
    });
  }
}

// src/index.js
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';
import './index.css';

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
serviceWorkerRegistration.register();

// To measure performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
reportWebVitals();

// webpack.config.js (optimized version)
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const WorkboxWebpackPlugin = require('workbox-webpack-plugin');
const WebpackPwaManifest = require('webpack-pwa-manifest');
const webpack = require('webpack');

module.exports = {
  entry: './src/index.js',
  mode: 'production',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'static/js/[name].[contenthash].js',
    publicPath: '/',
    assetModuleFilename: 'assets/[hash][ext][query]'
  },
  resolve: {
    extensions: ['.js', '.jsx'],
    fallback: {
      "path": require.resolve("path-browserify"),
      "stream": require.resolve("stream-browserify"),
      "crypto": require.resolve("crypto-browserify")
    }
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              ['@babel/preset-env', { 
                useBuiltIns: 'usage',
                corejs: 3 
              }],
              '@babel/preset-react'
            ],
            plugins: ['@babel/plugin-transform-runtime']
          }
        }
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader', 'postcss-loader']
      },
      {
        test: /\.(png|jpe?g|gif|svg|webp|glb|gltf)$/i,
        type: 'asset/resource'
      }
    ]
  },
  plugins: [
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      template: './public/index.html',
      favicon: './public/favicon.ico',
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true
      }
    }),
    new WebpackPwaManifest({
      name: '3D Shoe Customizer',
      short_name: 'ShoeCustomizer',
      description: 'Customize 3D shoes in your browser',
      background_color: '#ffffff',
      theme_color: '#4f46e5',
      crossorigin: 'use-credentials',
      inject: true,
      fingerprints: false,
      ios: true,
      icons: [
        {
          src: path.resolve('public/assets/icons/icon-512x512.png'),
          sizes: [96, 128, 192, 256, 384, 512],
          destination: path.join('assets', 'icons')
        }
      ]
    }),
    new WorkboxWebpackPlugin.GenerateSW({
      clientsClaim: true,
      skipWaiting: true,
      maximumFileSizeToCacheInBytes: 10 * 1024 * 1024,
      runtimeCaching: [
        {
          urlPattern: /\.(?:png|jpg|jpeg|svg|gif|glb|gltf)$/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'images',
            expiration: {
              maxEntries: 50,
              maxAgeSeconds: 30 * 24 * 60 * 60
            }
          }
        },
        {
          urlPattern: /\.(?:js|css)$/,
          handler: 'StaleWhileRevalidate',
          options: {
            cacheName: 'static-resources'
          }
        }
      ]
    }),
    new webpack.ProvidePlugin({
      process: 'process/browser',
      Buffer: ['buffer', 'Buffer']
    })
  ],
  optimization: {
    splitChunks: {
      chunks: 'all',
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all'
        },
        three: {
          test: /[\\/]node_modules[\\/](three|@react-three)[\\/]/,
          name: 'three',
          chunks: 'all',
          priority: 10
        }
      }
    },
    runtimeChunk: 'single'
  },
  performance: {
    hints: false,
    maxEntrypointSize: 512000,
    maxAssetSize: 512000
  }
};

{
  "name": "3d-shoe-customizer",
  "version": "1.0.0",
  "description": "A 3D shoe customization app built with React and Three.js",
  "private": true,
  "homepage": ".",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "three": "^0.158.0",
    "@react-three/fiber": "^8.15.12",
    "@react-three/drei": "^9.88.13"
  },
  "devDependencies": {
    "@babel/core": "^7.23.6",
    "@babel/preset-env": "^7.23.6",
    "@babel/preset-react": "^7.23.3",
    "@babel/plugin-transform-runtime": "^7.23.6",
    "@babel/runtime": "^7.23.6",
    "babel-loader": "^9.1.3",
    "webpack": "^5.89.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1",
    "html-webpack-plugin": "^5.6.0",
    "clean-webpack-plugin": "^4.0.0",
    "css-loader": "^6.8.1",
    "style-loader": "^3.3.3",
    "postcss": "^8.4.32",
    "postcss-loader": "^7.3.3",
    "autoprefixer": "^10.4.16",
    "workbox-webpack-plugin": "^7.0.0",
    "webpack-pwa-manifest": "^4.3.0",
    "path-browserify": "^1.0.1",
    "stream-browserify": "^3.0.0",
    "crypto-browserify": "^3.12.0",
    "process": "^0.11.10",
    "buffer": "^6.0.3",
    "core-js": "^3.34.0"
  },
  "scripts": {
    "start": "webpack serve --mode development --open",
    "build": "webpack --mode production",
    "build:dev": "webpack --mode development",
    "serve": "webpack serve --mode development",
    "clean": "rm -rf dist",
    "analyze": "webpack-bundle-analyzer dist/static/js/*.js",
    "lint": "eslint src --ext .js,.jsx",
    "lint:fix": "eslint src --ext .js,.jsx --fix",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "keywords": [
    "3d",
    "shoe",
    "customizer",
    "react",
    "three.js",
    "webgl",
    "pwa"
  ],
  "author": "Your Name",
  "license": "MIT",
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/3d-shoe-customizer.git"
  },
  "bugs": {
    "url": "https://github.com/yourusername/3d-shoe-customizer/issues"
  }
}

[build]
  command = "npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "18"
