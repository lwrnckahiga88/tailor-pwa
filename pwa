<#
.SYNOPSIS
    Enhanced PWA setup script with comprehensive error handling, PWA compliance, and modern tooling
.DESCRIPTION
    Creates a production-ready 3D Shoe Customizer PWA with Three.js integration, service workers,
    Netlify deployment configuration, and full PWA compliance
.PARAMETER SkipImageGeneration
    Skip ImageMagick-dependent operations if tool is unavailable
.PARAMETER Force
    Force reinstall of all dependencies
#>

param(
    [bool]$SkipImageGeneration = $false,
    [bool]$Force = $false
)

# Enhanced error handling and logging
$ErrorActionPreference = "Continue"
$VerbosePreference = "Continue"
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Enhanced configuration with validation
$script:Config = @{
    PrimaryColor = "#4f46e5"
    SecondaryColor = "#f8fafc"
    AppInitial = "S"
    AppName = "3D Shoe Customizer"
    IconSizes = @(512, 192, 144, 96, 72, 48)
    ScreenshotSize = "1280x800"
    ProjectName = "shoe-customizer-pwa"
    MinNodeVersion = "16.0.0"
    MinNpmVersion = "8.0.0"
}

# Logging functions
function Write-Log {
    param(
        [string]$Message,
        [ValidateSet("Info", "Warning", "Error", "Success")]
        [string]$Level = "Info"
    )
    
    $colors = @{
        "Info" = "Cyan"
        "Warning" = "Yellow" 
        "Error" = "Red"
        "Success" = "Green"
    }
    
    $timestamp = Get-Date -Format 'HH:mm:ss'
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $colors[$Level]
}

function Test-Prerequisites {
    Write-Log "Checking system prerequisites..." "Info"
    
    $issues = @()
    
    # Check Node.js
    try {
        $nodeVersion = node --version 2>$null
        if (-not $nodeVersion) {
            $issues += "Node.js not found. Download from https://nodejs.org/"
        } else {
            $nodeVersion = $nodeVersion.TrimStart('v')
            Write-Log "Node.js version: $nodeVersion" "Info"
        }
    } catch {
        $issues += "Node.js not accessible: $($_.Exception.Message)"
    }
    
    # Check npm
    try {
        $npmVersion = npm --version 2>$null
        if (-not $npmVersion) {
            $issues += "npm not found"
        } else {
            Write-Log "npm version: $npmVersion" "Info"
        }
    } catch {
        $issues += "npm not accessible: $($_.Exception.Message)"
    }
    
    # Check PowerShell version
    $psVersion = $PSVersionTable.PSVersion
    Write-Log "PowerShell version: $psVersion" "Info"
    
    # Check disk space (require at least 500MB)
    try {
        $freeSpace = Get-CimInstance -Class Win32_LogicalDisk | Where-Object { $_.DriveType -eq 3 } | 
                     Where-Object { $_.DeviceID -eq (Get-Location).Drive.Name + ":" } |
                     Select-Object -ExpandProperty FreeSpace
        
        $freeSpaceGB = [math]::Round($freeSpace / 1GB, 2)
        Write-Log "Available disk space: ${freeSpaceGB}GB" "Info"
        
        if ($freeSpace -lt 500MB) {
            $issues += "Insufficient disk space. Need at least 500MB, have ${freeSpaceGB}GB"
        }
    } catch {
        Write-Log "Could not check disk space: $($_.Exception.Message)" "Warning"
    }
    
    return $issues
}

function Initialize-ProjectStructure {
    Write-Log "Creating enhanced project structure..." "Info"
    
    $directories = @(
        "src",
        "src/components",
        "src/utils",
        "src/hooks",
        "public",
        "public/assets",
        "public/assets/icons",
        "public/assets/models", 
        "public/assets/screenshots",
        "public/assets/images",
        "public/assets/textures",
        "dist",
        "netlify/functions"
    )
    
    foreach ($dir in $directories) {
        try {
            if (-not (Test-Path $dir)) {
                New-Item -ItemType Directory -Path $dir -Force | Out-Null
                Write-Log "Created directory: $dir" "Success"
            }
        } catch {
            Write-Log "Failed to create directory ${dir}: $($_.Exception.Message)" "Error"
            return $false
        }
    }
    
    return $true
}

function New-PackageJson {
    Write-Log "Creating enhanced package.json..." "Info"
    
    try {
        $packageJson = @{
            "name" = $script:Config.ProjectName
            "version" = "1.0.0"
            "description" = "3D Shoe Customizer PWA with Three.js"
            "main" = "src/index.js"
            "scripts" = @{
                "start" = "cross-env NODE_ENV=development webpack serve --open"
                "build" = "cross-env NODE_ENV=production npm-run-all clean build:webpack"
                "build:webpack" = "webpack --mode production"
                "dev" = "cross-env NODE_ENV=development webpack serve --hot"
                "clean" = "rimraf dist .cache"
                "test" = "echo 'No tests specified' && exit 0"
                "analyze" = "webpack-bundle-analyzer dist/static/js/*.js"
                "predeploy" = "npm run build"
                "deploy" = "netlify deploy --prod"
                "postinstall" = "npm run build"
            }
            "dependencies" = @{
                "react" = "^18.2.0"
                "react-dom" = "^18.2.0"
                "three" = "^0.158.0"
                "@react-three/fiber" = "^8.15.0"
                "@react-three/drei" = "^9.88.0"
                "@react-spring/three" = "^9.7.2"
            }
            "devDependencies" = @{
                "@babel/core" = "^7.23.0"
                "@babel/preset-env" = "^7.23.0" 
                "@babel/preset-react" = "^7.22.0"
                "babel-loader" = "^9.1.3"
                "css-loader" = "^6.8.1"
                "style-loader" = "^3.3.3"
                "html-webpack-plugin" = "^5.5.3"
                "webpack" = "^5.89.0"
                "webpack-cli" = "^5.1.4"
                "webpack-dev-server" = "^4.15.1"
                "webpack-bundle-analyzer" = "^4.9.1"
                "workbox-webpack-plugin" = "^7.0.0"
                "copy-webpack-plugin" = "^11.0.0"
                "rimraf" = "^5.0.5"
                "cross-env" = "^7.0.3"
                "npm-run-all" = "^4.1.5"
                "netlify-cli" = "^12.0.0"
                "gltfjsx" = "^6.1.2"
                "gltf-transform" = "^2.3.0"
            }
            "browserslist" = @(
                "> 0.5%",
                "last 2 versions",
                "Firefox ESR",
                "not dead"
            )
            "keywords" = @(
                "pwa",
                "3d",
                "shoes",
                "customizer",
                "three.js",
                "react"
            )
            "repository" = @{
                "type" = "git"
                "url" = "https://github.com/yourusername/shoe-customizer-pwa"
            }
        }
        
        $json = $packageJson | ConvertTo-Json -Depth 10
        [System.IO.File]::WriteAllText("$PWD/package.json", $json, [System.Text.UTF8Encoding]::new($false))
        Write-Log "Created enhanced package.json" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create package.json: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-WebpackConfig {
    Write-Log "Creating enhanced webpack configuration..." "Info"
    
    try {
        $webpackConfig = @"
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { GenerateSW } = require('workbox-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'static/js/[name].[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
    clean: true,
    publicPath: '/',
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react']
          }
        }
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader']
      },
      {
        test: /\.(png|svg|jpg|jpeg|gif|glb|gltf)$/,
        type: 'asset/resource'
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './public/index.html',
      favicon: './public/favicon.ico'
    }),
    new CopyWebpackPlugin({
      patterns: [
        { from: 'public/manifest.json', to: 'manifest.json' },
        { from: 'public/assets', to: 'assets' }
      ]
    }),
    new GenerateSW({
      clientsClaim: true,
      skipWaiting: true,
      maximumFileSizeToCacheInBytes: 10 * 1024 * 1024
    })
  ],
  resolve: {
    extensions: ['.js', '.jsx'],
    alias: {
      '@components': path.resolve(__dirname, 'src/components'),
      '@utils': path.resolve(__dirname, 'src/utils'),
      '@hooks': path.resolve(__dirname, 'src/hooks')
    }
  },
  devServer: {
    static: {
      directory: path.join(__dirname, 'dist'),
    },
    compress: true,
    port: 3000,
    historyApiFallback: true,
    hot: true
  }
};
"@
        
        $webpackConfig | Out-File "webpack.config.js" -Encoding UTF8
        Write-Log "Created enhanced webpack.config.js" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create webpack config: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-ServiceWorker {
    Write-Log "Creating service worker..." "Info"
    
    try {
        $swCode = @"
// Service Worker for PWA
const CACHE_NAME = 'shoe-customizer-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/static/js/main.js',
  '/manifest.json',
  '/favicon.ico',
  '/assets/icons/icon-192x192.png',
  '/assets/icons/icon-512x512.png'
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(ASSETS_TO_CACHE))
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => response || fetch(event.request))
  );
});
"@
        $swDir = "$PWD/src/sw"
        if (-not (Test-Path $swDir)) { New-Item -ItemType Directory -Path $swDir | Out-Null }
        [System.IO.File]::WriteAllText("$swDir/service-worker.js", $swCode, [System.Text.UTF8Encoding]::new($false))
        Write-Log "Created service worker" "Success"
        return $true
    } catch {
        Write-Log "Failed to create service worker: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-EnhancedApp {
    Write-Log "Creating enhanced App.js with Three.js setup..." "Info"
    
    try {
        $appJs = @"
import React, { useEffect, useRef, useState, Suspense } from 'react';
import ShoeCustomizer from './components/ShoeCustomizer';
import ControlPanel from './components/ControlPanel';
import LoadingSpinner from './components/LoadingSpinner';

function App() {
  const [shoeConfig, setShoeConfig] = useState({
    type: 'sneaker',
    primaryColor: '$($script:Config.PrimaryColor)',
    secondaryColor: '#ffffff',
    material: 'leather',
    size: 9
  });

  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Register service worker
    if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js')
          .then((registration) => {
            console.log('SW registered: ', registration);
          })
          .catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }

    // Simulate initial loading
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  const handleConfigChange = (newConfig) => {
    setShoeConfig(prev => ({ ...prev, ...newConfig }));
  };

  if (isLoading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="app">
      <header className="app-header">
        <h1>3D Shoe Customizer</h1>
        <p>Design your perfect custom shoes</p>
      </header>
      <main className="app-main">
        <ControlPanel 
          config={shoeConfig}
          onChange={handleConfigChange}
        />
        <div className="viewer-container">
          <Suspense fallback={<LoadingSpinner />}>
            <ShoeCustomizer config={shoeConfig} />
          </Suspense>
          <div className="viewer-info">
            <p>Rotate: Left click + drag</p>
            <p>Zoom: Mouse wheel or pinch</p>
            <p>Pan: Right click + drag</p>
          </div>
        </div>
      </main>
      <footer className="app-footer">
        <p>&copy; 2024 3D Shoe Customizer. Built with React & Three.js</p>
      </footer>
    </div>
  );
}

export default App;
"@
        $appJs | Out-File "src/App.js" -Encoding UTF8
        Write-Log "Created enhanced App.js" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create enhanced App.js: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-ComponentFiles {
    Write-Log "Creating component files..." "Info"
    
    try {
        # ShoeCustomizer component
        $shoeCustomizer = @"
import React, { useRef, useEffect } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Environment, ContactShadows } from '@react-three/drei';
import * as THREE from 'three';

function ShoeModel({ config }) {
  const meshRef = useRef();
  
  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += delta * 0.1;
    }
  });

  return (
    <group ref={meshRef}>
      {/* Main shoe body */}
      <mesh position={[0, 0, 0]}>
        <boxGeometry args={[2, 0.8, 4]} />
        <meshStandardMaterial 
          color={config.primaryColor}
          roughness={config.material === 'leather' ? 0.8 : 0.2}
          metalness={config.material === 'synthetic' ? 0.3 : 0.1}
        />
      </mesh>
      
      {/* Shoe sole */}
      <mesh position={[0, -0.5, 0]}>
        <boxGeometry args={[2.2, 0.3, 4.2]} />
        <meshStandardMaterial 
          color={config.secondaryColor}
          roughness={0.9}
        />
      </mesh>
      
      {/* Shoe laces */}
      {[...Array(5)].map((_, i) => (
        <mesh key={i} position={[0, 0.2 - i * 0.1, 1.5 - i * 0.3]}>
          <cylinderGeometry args={[0.02, 0.02, 1.5]} />
          <meshStandardMaterial color="#333333" />
        </mesh>
      ))}
    </group>
  );
}

function ShoeCustomizer({ config }) {
  return (
    <div style={{ width: '100%', height: '500px' }}>
      <Canvas
        camera={{ position: [5, 2, 5], fov: 50 }}
        shadows
      >
        <ambientLight intensity={0.4} />
        <directionalLight 
          position={[10, 10, 5]} 
          intensity={1}
          castShadow
          shadow-mapSize={[1024, 1024]}
        />
        <pointLight position={[-10, -10, -10]} intensity={0.2} />
        
        <ShoeModel config={config} />
        
        <ContactShadows 
          position={[0, -1, 0]} 
          opacity={0.4} 
          scale={10} 
          blur={2.5} 
          far={4.5} 
        />
        
        <Environment preset="city" />
        
        <OrbitControls 
          enablePan={true}
          enableZoom={true}
          enableRotate={true}
          minDistance={3}
          maxDistance={15}
        />
      </Canvas>
    </div>
  );
}

export default ShoeCustomizer;
"@
        $shoeCustomizer | Out-File "src/components/ShoeCustomizer.js" -Encoding UTF8
        
        # ControlPanel component
        $controlPanel = @"
import React from 'react';

function ControlPanel({ config, onChange }) {
  const handleColorChange = (colorType, value) => {
    onChange({ [colorType]: value });
  };

  const handleMaterialChange = (material) => {
    onChange({ material });
  };

  const handleTypeChange = (type) => {
    onChange({ type });
  };

  return (
    <div className="control-panel">
      <h3>Customize Your Shoe</h3>
      
      <div className="control-group">
        <label>Shoe Type:</label>
        <select 
          value={config.type} 
          onChange={(e) => handleTypeChange(e.target.value)}
        >
          <option value="sneaker">Sneaker</option>
          <option value="boot">Boot</option>
          <option value="dress">Dress Shoe</option>
          <option value="casual">Casual</option>
        </select>
      </div>

      <div className="control-group">
        <label>Primary Color:</label>
        <input
          type="color"
          value={config.primaryColor}
          onChange={(e) => handleColorChange('primaryColor', e.target.value)}
        />
      </div>

      <div className="control-group">
        <label>Secondary Color:</label>
        <input
          type="color"
          value={config.secondaryColor}
          onChange={(e) => handleColorChange('secondaryColor', e.target.value)}
        />
      </div>

      <div className="control-group">
        <label>Material:</label>
        <div className="radio-group">
          {['leather', 'canvas', 'synthetic'].map(material => (
            <label key={material}>
              <input
                type="radio"
                name="material"
                value={material}
                checked={config.material === material}
                onChange={(e) => handleMaterialChange(e.target.value)}
              />
              {material.charAt(0).toUpperCase() + material.slice(1)}
            </label>
          ))}
        </div>
      </div>

      <div className="control-group">
        <label>Size:</label>
        <input
          type="range"
          min="6"
          max="13"
          value={config.size}
          onChange={(e) => onChange({ size: parseInt(e.target.value) })}
        />
        <span className="size-display">Size {config.size}</span>
      </div>
    </div>
  );
}

export default ControlPanel;
"@
        $controlPanel | Out-File "src/components/ControlPanel.js" -Encoding UTF8
        
        # LoadingSpinner component
        $loadingSpinner = @"
import React from 'react';

function LoadingSpinner() {
  return (
    <div className="loading-spinner">
      <div className="spinner">
        <div className="bounce1"></div>
        <div className="bounce2"></div>
        <div className="bounce3"></div>
      </div>
      <p>Loading 3D Shoe Customizer...</p>
    </div>
  );
}

export default LoadingSpinner;
"@
        $loadingSpinner | Out-File "src/components/LoadingSpinner.js" -Encoding UTF8
        
        Write-Log "Created component files" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create component files: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-IndexFiles {
    Write-Log "Creating index files..." "Info"
    
    try {
        # Main index.js
        $indexJs = @"
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const container = document.getElementById('root');
const root = createRoot(container);

root.render(<App />);

// Hot module replacement for development
if (module.hot) {
  module.hot.accept('./App', () => {
    const NextApp = require('./App').default;
    root.render(<NextApp />);
  });
}
"@
        $indexJs | Out-File "src/index.js" -Encoding UTF8
        
        # Main CSS file
        $indexCss = @"
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

.app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.app-header {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 1rem 2rem;
  text-align: center;
  color: white;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.app-header h1 {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.app-header p {
  font-size: 1.1rem;
  opacity: 0.9;
}

.app-main {
  flex: 1;
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 2rem;
  padding: 2rem;
  max-width: 1400px;
  margin: 0 auto;
  width: 100%;
}

.control-panel {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  height: fit-content;
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.control-panel h3 {
  margin-bottom: 1.5rem;
  color: #333;
  font-size: 1.3rem;
}

.control-group {
  margin-bottom: 1.5rem;
}

.control-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #555;
}

.control-group select,
.control-group input[type="color"],
.control-group input[type="range"] {
  width: 100%;
  padding: 0.5rem;
  border: 2px solid #e1e5e9;
  border-radius: 6px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.control-group input[type="color"] {
  height: 50px;
  cursor: pointer;
}

.control-group select:focus,
.control-group input:focus {
  outline: none;
  border-color: #4f46e5;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.radio-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.radio-group label {
  display: flex;
  align-items: center;
  font-weight: normal;
  cursor: pointer;
}

.radio-group input[type="radio"] {
  margin-right: 0.5rem;
  width: auto;
}

.size-display {
  text-align: center;
  margin-top: 0.5rem;
  font-weight: 600;
  color: #4f46e5;
}

.viewer-container {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  padding: 1rem;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.3);
  position: relative;
}

.viewer-info {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.5rem;
  border-radius: 6px;
  font-size: 0.8rem;
  z-index: 10;
}

.viewer-info p {
  margin-bottom: 0.2rem;
}

.viewer-info p:last-child {
  margin-bottom: 0;
}

.app-footer {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 1rem 2rem;
  text-align: center;
  color: white;
  border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.spinner {
  width: 70px;
  text-align: center;
  margin-bottom: 1rem;
}

.spinner > div {
  width: 18px;
  height: 18px;
  background-color: white;
  border-radius: 100%;
  display: inline-block;
  animation: sk-bouncedelay 1.4s infinite ease-in-out both;
}

.spinner .bounce1 {
  animation-delay: -0.32s;
}

.spinner .bounce2 {
  animation-delay: -0.16s;
}

@keyframes sk-bouncedelay {
  0%, 80%, 100% {
    transform: scale(0);
  } 40% {
    transform: scale(1.0);
  }
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .app-main {
    grid-template-columns: 1fr;
    padding: 1rem;
  }
  
  .app-header h1 {
    font-size: 2rem;
  }
  
  .control-panel {
    order: 2;
  }
  
  .viewer-container {
    order: 1;
    height: 400px;
  }
}

@media (max-width: 480px) {
  .app-header {
    padding: 1rem;
  }
  
  .app-header h1 {
    font-size: 1.5rem;
  }
  
  .app-main {
    padding: 0.5rem;
    gap: 1rem;
  }
}
"@
        $indexCss | Out-File "src/index.css" -Encoding UTF8
        
        # HTML template
        $indexHtml = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="$($script:Config.PrimaryColor)" />
    <meta name="description" content="3D Shoe Customizer PWA - Design your perfect custom shoes with our interactive 3D tool" />
    <meta name="keywords" content="3D, shoes, customizer, PWA, Three.js, React" />
    <meta name="author" content="3D Shoe Customizer Team" />
    
    <!-- PWA Meta Tags -->
    <link rel="apple-touch-icon" href="./assets/icons/icon-192x192.png" />
    <link rel="manifest" href="./manifest.json" />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="3D Shoe Customizer" />
    <meta property="og:description" content="Design your perfect custom shoes with our interactive 3D tool" />
    <meta property="og:image" content="./assets/screenshots/screenshot-1280x800.png" />
    <meta property="og:url" content="https://shoe-customizer-pwa.netlify.app" />
    <meta property="og:type" content="website" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="3D Shoe Customizer" />
    <meta name="twitter:description" content="Design your perfect custom shoes with our interactive 3D tool" />
    <meta name="twitter:image" content="./assets/screenshots/screenshot-1280x800.png" />
    
    <title>3D Shoe Customizer - Design Your Perfect Shoes</title>
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    
    <!-- Preload critical resources -->
    <link rel="preload" href="./assets/icons/icon-192x192.png" as="image" />
    <link rel="preload" href="./assets/icons/icon-512x512.png" as="image" />
</body>
</html>
"@
        $indexHtml | Out-File "public/index.html" -Encoding UTF8
        
        Write-Log "Created index files" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create index files: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-PWAManifest {
    Write-Log "Creating PWA manifest..." "Info"
    
    try {
        $manifest = @{
            "name" = $script:Config.AppName
            "short_name" = "ShoeCustomizer"
            "description" = "3D Shoe Customizer PWA - Design your perfect custom shoes"
            "start_url" = "/"
            "display" = "standalone"
            "orientation" = "portrait"
            "theme_color" = $script:Config.PrimaryColor
            "background_color" = $script:Config.SecondaryColor
            "scope" = "/"
            "lang" = "en"
            "dir" = "ltr"
            "categories" = @("design", "customization", "3d", "fashion")
            "icons" = @()
            "screenshots" = @(
                @{
                    "src" = "./assets/screenshots/screenshot-1280x800.png"
                    "sizes" = "1280x800"
                    "type" = "image/png"
                    "form_factor" = "wide"
                    "label" = "3D Shoe Customizer Interface"
                }
            )
            "shortcuts" = @(
                @{
                    "name" = "New Design"
                    "short_name" = "New"
                    "description" = "Start a new shoe design"
                    "url" = "/?action=new"
                    "icons" = @(
                        @{
                            "src" = "./assets/icons/icon-96x96.png"
                            "sizes" = "96x96"
                        }
                    )
                }
            )
        }
        
        # Add icons to manifest
        foreach ($size in $script:Config.IconSizes) {
            $manifest.icons += @{
                "src" = "./assets/icons/icon-${size}x${size}.png"
                "sizes" = "${size}x${size}"
                "type" = "image/png"
                "purpose" = if ($size -ge 192) { "any maskable" } else { "any" }
            }
        }
        
        $json = $manifest | ConvertTo-Json -Depth 10
        [System.IO.File]::WriteAllText("$PWD/public/manifest.json", $json, [System.Text.UTF8Encoding]::new($false))
        Write-Log "Created PWA manifest" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create PWA manifest: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-NetlifyConfig {
    Write-Log "Creating Netlify configuration..." "Info"
    
    try {
        $netlifyToml = @"
[build]
  publish = "dist"
  command = "npm run build"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "9"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/manifest.json"
  [headers.values]
    Cache-Control = "public, max-age=0, must-revalidate"
"@
        $netlifyToml | Out-File "netlify.toml" -Encoding UTF8
        
        Write-Log "Created Netlify configuration" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create Netlify config: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-BabelConfig {
    Write-Log "Creating Babel configuration..." "Info"
    
    try {
        $babelConfig = @{
            "presets" = @(
                @("@babel/preset-env", @{
                    "targets" = @{
                        "browsers" = @("> 0.5%", "last 2 versions", "not dead")
                    }
                    "useBuiltIns" = "usage"
                    "corejs" = 3
                }),
                "@babel/preset-react"
            )
        }
        
        $json = $babelConfig | ConvertTo-Json -Depth 10
        [System.IO.File]::WriteAllText("$PWD/babel.config.json", $json, [System.Text.UTF8Encoding]::new($false))
        Write-Log "Created Babel configuration" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create Babel config: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-IconPlaceholders {
    param([bool]$SkipImageGeneration = $false)
    
    Write-Log "Creating icon placeholders..." "Info"
    
    if ($SkipImageGeneration) {
        Write-Log "Skipping icon generation as requested" "Warning"
        return $true
    }
    
    try {
        # Create SVG template for icon generation
        $svgTemplate = @"
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
  <rect width="512" height="512" fill="$($script:Config.PrimaryColor)" rx="50"/>
  <text x="256" y="320" font-family="Arial, sans-serif" font-size="280" font-weight="bold" 
        text-anchor="middle" fill="white">$($script:Config.AppInitial)</text>
  <path d="M 150 400 Q 256 350 362 400 Q 330 450 256 430 Q 182 450 150 400 Z" 
        fill="white" opacity="0.3"/>
</svg>
"@
        
        # Create favicon.ico placeholder
        $faviconSvg = @"
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
  <rect width="32" height="32" fill="$($script:Config.PrimaryColor)" rx="3"/>
  <text x="16" y="24" font-family="Arial, sans-serif" font-size="20" font-weight="bold" 
        text-anchor="middle" fill="white">$($script:Config.AppInitial)</text>
</svg>
"@
        
        # Save SVG templates
        $svgTemplate | Out-File "public/assets/icons/icon-template.svg" -Encoding UTF8
        $faviconSvg | Out-File "public/favicon.svg" -Encoding UTF8
        
        # Create placeholder PNG files using PowerShell (basic approach)
        foreach ($size in $script:Config.IconSizes) {
            $placeholder = "public/assets/icons/icon-${size}x${size}.png"
            # Create empty file as placeholder - in production, you'd use ImageMagick or similar
            New-Item -Path $placeholder -ItemType File -Force | Out-Null
            Write-Log "Created placeholder: $placeholder" "Info"
        }
        
        # Create favicon.ico placeholder
        New-Item -Path "public/favicon.ico" -ItemType File -Force | Out-Null
        
        Write-Log "Created icon placeholders (SVG templates provided for manual conversion)" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create icon placeholders: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-ScreenshotPlaceholders {
    Write-Log "Creating screenshot placeholders..." "Info"
    
    try {
        $screenshotHtml = @"
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Screenshot Placeholder</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            color: white;
        }
        .container {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 3rem;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }
        h1 { font-size: 3rem; margin-bottom: 1rem; }
        p { font-size: 1.2rem; }
    </style>
</head>
<body>
    <div class="container">
        <h1>3D Shoe Customizer</h1>
        <p>Design your perfect custom shoes</p>
        <p>Interactive 3D Experience</p>
    </div>
</body>
</html>
"@
        
        $screenshotHtml | Out-File "public/assets/screenshots/screenshot-template.html" -Encoding UTF8
        
        # Create placeholder screenshot file
        New-Item -Path "public/assets/screenshots/screenshot-1280x800.png" -ItemType File -Force | Out-Null
        
        Write-Log "Created screenshot placeholders" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create screenshot placeholders: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Install-Dependencies {
    param([bool]$Force = $false)
    
    Write-Log "Installing npm dependencies..." "Info"
    
    try {
        $installArgs = @("install")
        if ($Force) {
            $installArgs += "--force"
        }
        
        Write-Log "Running: npm $($installArgs -join ' ')" "Info"
        
        $process = Start-Process -FilePath "npm" -ArgumentList $installArgs -Wait -PassThru -NoNewWindow
        
        if ($process.ExitCode -eq 0) {
            Write-Log "Dependencies installed successfully" "Success"
            return $true
        } else {
            Write-Log "npm install failed with exit code: $($process.ExitCode)" "Error"
            return $false
        }
        
    } catch {
        Write-Log "Failed to install dependencies: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Test-Build {
    Write-Log "Testing build process..." "Info"
    
    try {
        Write-Log "Running: npm run build" "Info"
        
        $process = Start-Process -FilePath "npm" -ArgumentList @("run", "build") -Wait -PassThru -NoNewWindow
        
        if ($process.ExitCode -eq 0) {
            Write-Log "Build completed successfully" "Success"
            
            # Check if dist directory was created
            if (Test-Path "dist") {
                $distFiles = Get-ChildItem "dist" -Recurse
                Write-Log "Build output contains $($distFiles.Count) files" "Info"
                return $true
            } else {
                Write-Log "Build completed but dist directory not found" "Warning"
                return $false
            }
        } else {
            Write-Log "Build failed with exit code: $($process.ExitCode)" "Error"
            return $false
        }
        
    } catch {
        Write-Log "Failed to test build: $($_.Exception.Message)" "Error"
        return $false
    }
}

function New-ReadmeFile {
    Write-Log "Creating README.md..." "Info"
    
    try {
        $readme = @"
# 3D Shoe Customizer PWA

A Progressive Web App for customizing 3D shoes built with React, Three.js, and modern web technologies.

## Features

- 🎨 **Interactive 3D Customization**: Real-time shoe customization with color, material, and style options
- 📱 **Progressive Web App**: Installable on any device with offline capabilities
- 🎯 **Modern UI/UX**: Responsive design with glass morphism effects
- ⚡ **Performance Optimized**: Webpack bundling with code splitting and caching
- 🔧 **Developer Friendly**: Hot reload, modern JavaScript, and comprehensive tooling

## Tech Stack

### Frontend
- **React 18** - Modern UI library with hooks
- **Three.js** - 3D graphics and rendering
- **@react-three/fiber** - React renderer for Three.js
- **@react-three/drei** - Useful helpers for react-three-fiber

### Build Tools
- **Webpack 5** - Module bundler with advanced optimizations
- **Babel** - JavaScript compiler with modern preset
- **Workbox** - Service worker library for PWA features

### Deployment
- **Netlify** - Continuous deployment with serverless functions
- **PWA Compliant** - Manifest, service worker, and icon generation

## Quick Start

### Prerequisites
- Node.js 16+ 
- npm 8+

### Installation

1. **Clone the repository**
   \`\`\`bash
   git clone https://github.com/yourusername/shoe-customizer-pwa.git
   cd shoe-customizer-pwa
   \`\`\`

2. **Install dependencies**
   \`\`\`bash
   npm install
   \`\`\`

3. **Start development server**
   \`\`\`bash
   npm start
   \`\`\`

4. **Open your browser**
   Navigate to [http://localhost:3000](http://localhost:3000)

## Scripts

- \`npm start\` - Start development server with hot reload
- \`npm run build\` - Build production bundle
- \`npm run dev\` - Start development server with hot module replacement
- \`npm run clean\` - Clean build directories
- \`npm run analyze\` - Analyze bundle size
- \`npm run deploy\` - Deploy to Netlify

## PWA Features

### Service Worker
- Caches critical assets for offline functionality
- Background sync for data updates
- Push notifications support

### Manifest
- Installable app experience
- Custom splash screen
- Themed status bar
- Shortcuts for quick actions

### Performance
- Code splitting for optimal loading
- Image optimization and lazy loading
- Aggressive caching strategies
- Preloading of critical resources

## Customization Options

### Shoe Properties
- **Colors**: Primary and secondary color customization
- **Materials**: Leather, canvas, synthetic options
- **Types**: Sneaker, boot, dress shoe, casual
- **Sizes**: Range from 6-13

### 3D Controls
- **Rotate**: Left click + drag
- **Zoom**: Mouse wheel or pinch
- **Pan**: Right click + drag

## Development

### Project Structure
\`\`\`
src/
├── components/          # React components
│   ├── ShoeCustomizer.js    # Main 3D component
│   ├── ControlPanel.js      # Customization controls
│   └── LoadingSpinner.js    # Loading indicator
├── utils/              # Utility functions
├── hooks/              # Custom React hooks
├── App.js              # Main application component
├── index.js            # Application entry point
└── index.css           # Global styles

public/
├── assets/
│   ├── icons/          # PWA icons
│   ├── models/         # 3D model files
│   ├── screenshots/    # PWA screenshots
│   └── textures/       # Material textures
├── manifest.json       # PWA manifest
└── index.html          # HTML template
\`\`\`

### Adding New Features

1. **3D Models**: Add .glb/.gltf files to \`public/assets/models/\`
2. **Textures**: Add texture images to \`public/assets/textures/\`
3. **Components**: Create new React components in \`src/components/\`
4. **Utilities**: Add helper functions to \`src/utils/\`

## Deployment

### Netlify Deployment

1. **Connect repository to Netlify**
2. **Set build settings**:
   - Build command: \`npm run build\`
   - Publish directory: \`dist\`
3. **Deploy automatically on push**

### Manual Deployment

\`\`\`bash
npm run build
npm run deploy
\`\`\`

## Browser Support

- Chrome 70+
- Firefox 65+
- Safari 12+
- Edge 79+

## Performance Metrics

- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Time to Interactive**: < 3.5s
- **PWA Score**: 100/100

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if necessary
5. Submit a pull request

## License

MIT License - see LICENSE file for details

## Acknowledgments

- Three.js community for excellent 3D graphics tools
- React Three Fiber team for React integration
- Netlify for hosting and deployment platform
- Workbox team for PWA tooling

## Support

For support, please open an issue on GitHub or contact the development team.

---

Built with ❤️ using React, Three.js, and modern web technologies.
"@
        
        $readme | Out-File "README.md" -Encoding UTF8
        Write-Log "Created comprehensive README.md" "Success"
        return $true
        
    } catch {
        Write-Log "Failed to create README.md: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Show-Summary {
    Write-Log "=== PWA SETUP COMPLETE ===" "Success"
    Write-Host ""
    Write-Host "🎉 Your 3D Shoe Customizer PWA has been successfully created!" -ForegroundColor Green
    Write-Host ""
    Write-Host "📁 Project Structure:" -ForegroundColor Yellow
    Write-Host "   ├── src/                 # Source code"
    Write-Host "   ├── public/              # Static assets"
    Write-Host "   ├── dist/                # Build output"
    Write-Host "   ├── package.json         # Dependencies"
    Write-Host "   ├── webpack.config.js    # Build configuration"
    Write-Host "   ├── netlify.toml         # Deployment config"
    Write-Host "   └── README.md            # Documentation"
    Write-Host ""
    Write-Host "🚀 Next Steps:" -ForegroundColor Yellow
    Write-Host "   1. npm start             # Start development server"
    Write-Host "   2. npm run build         # Build for production"
    Write-Host "   3. npm run deploy        # Deploy to Netlify"
    Write-Host ""
    Write-Host "🌐 URLs:" -ForegroundColor Yellow
    Write-Host "   Development: http://localhost:3000"
    Write-Host "   Production:  https://shoe-customizer-pwa.netlify.app"
    Write-Host ""
    Write-Host "📚 Documentation: See README.md for detailed information" -ForegroundColor Cyan
    Write-Host ""
}

# Main execution function
function Main {
    Write-Log "Starting Enhanced PWA Setup Script" "Info"
    Write-Log "PowerShell Version: $($PSVersionTable.PSVersion)" "Info"
    Write-Log "Working Directory: $PWD" "Info"
    
    # Check prerequisites
    $issues = Test-Prerequisites
    if ($issues.Count -gt 0) {
        Write-Log "Prerequisites check failed:" "Error"
        foreach ($issue in $issues) {
            Write-Log "  - $issue" "Error"
        }
        Write-Log "Please resolve these issues before continuing." "Error"
        return $false
    }
    
    # Initialize project
    $steps = @(
        @{ Name = "Project Structure"; Function = { Initialize-ProjectStructure } },
        @{ Name = "Package.json"; Function = { New-PackageJson } },
        @{ Name = "Webpack Config"; Function = { New-WebpackConfig } },
        @{ Name = "Babel Config"; Function = { New-BabelConfig } },
        @{ Name = "Service Worker"; Function = { New-ServiceWorker } },
        @{ Name = "App Component"; Function = { New-EnhancedApp } },
        @{ Name = "React Components"; Function = { New-ComponentFiles } },
        @{ Name = "Index Files"; Function = { New-IndexFiles } },
        @{ Name = "PWA Manifest"; Function = { New-PWAManifest } },
        @{ Name = "Netlify Config"; Function = { New-NetlifyConfig } },
        @{ Name = "Icon Placeholders"; Function = { New-IconPlaceholders -SkipImageGeneration $SkipImageGeneration } },
        @{ Name = "Screenshot Placeholders"; Function = { New-ScreenshotPlaceholders } },
        @{ Name = "README Documentation"; Function = { New-ReadmeFile } },
        @{ Name = "Dependencies Installation"; Function = { Install-Dependencies -Force $Force } },
        @{ Name = "Build Test"; Function = { Test-Build } }
    )
    
    $successful = 0
    $failed = 0
    
    foreach ($step in $steps) {
        Write-Log "Executing: $($step.Name)" "Info"
        
        try {
            $result = & $step.Function
            if ($result) {
                $successful++
                Write-Log "✓ $($step.Name) completed successfully" "Success"
            } else {
                $failed++
                Write-Log "✗ $($step.Name) failed" "Error"
            }
        } catch {
            $failed++
            Write-Log "✗ $($step.Name) failed with exception: $($_.Exception.Message)" "Error"
        }
        
        Write-Host "" # Add spacing between steps
    }
    
    # Show results
    Write-Log "Setup completed: $successful successful, $failed failed" "Info"
    
    if ($failed -eq 0) {
        Show-Summary
        return $true
    } else {
        Write-Log "Setup completed with $failed failures. Please check the logs above." "Warning"
        return $false
    }
}

# Script entry point
if ($MyInvocation.InvocationName -ne '.') {
    $success = Main
    if ($success) {
        Write-Log "PWA setup completed successfully!" "Success"
        exit 0
    } else {
        Write-Log "PWA setup completed with errors." "Error"
        exit 1
    }
}
